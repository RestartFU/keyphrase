package main

import (
	"bufio"
	"encoding/base64"
	"fmt"
	"github.com/restartfu/keyphrase/keyphrase/codec"
	"log"
	"os"
	"path/filepath"
	"strings"
)

var b64wordList = ``

func main() {
	decodedWordListBuf, err := base64.StdEncoding.DecodeString(b64wordList)
	if err != nil {
		log.Fatalf("error decoding base64 encoded wordlist: %v", err)
	}
	decodedWordList := strings.Split(string(decodedWordListBuf), "\n")

	args := os.Args[1:]
	if len(args) < 1 {
		printUsage()
		os.Exit(1)
	}

	if wordListPath, ok := findFlag(args, "--wordlist"); ok {
		wordList, err := os.ReadFile(wordListPath)
		if err != nil {
			log.Fatalf("error reading wordlist: %v", err)
		}
		b64wordList = base64.StdEncoding.EncodeToString(wordList)

		fmt.Println("Using wordlist from:", filepath.Base(wordListPath))
	}

	switch args[0] {
	case "encode":
		privateKey := getInput("Enter your hex-encoded WIF private key: ")
		words := encode(privateKey, decodedWordList)
		fmt.Println(strings.Join(words, " "))
	case "decode":
		words := getInput("Enter your private key words (seperated by spaces): ")
		privateKey := decode(strings.Split(words, " "), decodedWordList)
		fmt.Println(privateKey)
	}
}

func encode(hexKey string, wordlist []string) []string {
	words, err := codec.Bitcoin.Encode(hexKey, wordlist)
	if err != nil {
		log.Fatalf("error encoding wordlist: %v", err)
	}
	return words
}

func decode(words []string, wordlist []string) string {
	privateKey, err := codec.Bitcoin.Decode(words, wordlist)
	if err != nil {
		log.Fatalf("error decoding wordlist: %v", err)
	}
	return privateKey
}

func getInput(msg string) string {
	fmt.Print(msg)
	s := bufio.NewScanner(os.Stdin)
	if s.Scan() {
		return s.Text()
	}
	log.Fatalf("error reading input")
	return ""
}

func printUsage() {
	fmt.Println(`Usage:
  keyphrase encode - Convert a hex private key to mnemonic
  keyphrase decode - Convert mnemonic back to hex private key`)
}

func findFlag(args []string, key string) (string, bool) {
	for _, arg := range args {
		split := strings.Split(arg, "=")
		if len(split) == 2 && split[0] == key {
			return strings.Join(split[1:], "="), true
		}
	}
	return "", false
}
